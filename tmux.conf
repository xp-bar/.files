# ==========================
# ===  General settings  ===
# ==========================

set -g default-terminal "screen-256color"
# Add truecolor support
set-option -ga terminal-overrides ",xterm-256color:Tc"
set -g history-limit 20000
set -g buffer-limit 20
set -sg escape-time 0
set -g display-time 1500
set -g remain-on-exit off
set -g repeat-time 300
setw -g allow-rename off
set allow-rename off
setw -g automatic-rename off
setw -g aggressive-resize off
set -g focus-events on

# Change prefix key to C-a, easier to type, same to "screen"
unbind C-b
set -g prefix C-a

# Set parent terminal title to reflect current window in tmux session
set -g set-titles on
set -g set-titles-string "#I:#W"

# Start index of window/pane with 1, because we're humans, not computers
set -g base-index 1
setw -g pane-base-index 1

# Enable mouse support
set -g mouse on

set-environment -g PATH "/usr/local/bin:/bin:/usr/bin"

# ==========================
# ===   Key bindings     ===
# ==========================

# Unbind default key bindings, we're going to override
unbind "\$" # rename-session
unbind ,    # rename-window
unbind %    # split-window -h
unbind '"'  # split-window
unbind }    # swap-pane -D
unbind {    # swap-pane -U
unbind [    # paste-buffer
unbind ]
unbind "'"  # select-window
unbind n    # next-window
unbind p    # previous-window
unbind l    # last-window
unbind M-n  # next window with alert
unbind M-p  # next window with alert
unbind o    # focus thru panes
unbind &    # kill-window
unbind "#"  # list-buffer
unbind =    # choose-buffer
unbind z    # zoom-pane
unbind M-Up  # resize 5 rows up
unbind M-Down # resize 5 rows down
unbind M-Right # resize 5 rows right
unbind M-Left # resize 5 rows left


set-window-option -g mode-keys vi

# Edit configuration and reload
bind C-e new-window -n 'tmux.conf' "sh -c '\${EDITOR:-vim} ~/.tmux.conf && tmux source ~/.tmux.conf && tmux display \"Config reloaded\"'"

# Reload tmux configuration
bind C-r source-file ~/.tmux.conf \; display "Config reloaded"

# new window and retain cwd
bind c new-window -c "#{pane_current_path}"

# Prompt to rename window right after it's created
set-hook -g after-new-window 'command-prompt -I "#{window_name}" "rename-window '%%'"'
# set-hook -g after-new-window ''

# Rename session and window
bind r command-prompt -I "#{window_name}" "rename-window '%%'"
bind R command-prompt -I "#{session_name}" "rename-session '%%'"

# Split panes
bind | split-window -h -c "#{pane_current_path}"
bind _ split-window -v -c "#{pane_current_path}"

# Select pane and windows
bind -r I previous-window
bind -r O next-window
# bind -r [ select-pane -t :.-
# bind -r ] select-pane -t :.+
bind -r C-o swap-pane -D

# Zoom pane
bind + resize-pane -Z

bind -r , resize-pane -L
bind -r . resize-pane -R

# Link window
bind L command-prompt -p "Link window from (session:window): " "link-window -s %% -a"

# Swap panes back and forth with 1st pane
# When in main-(horizontal|vertical) layouts, the biggest/widest panel is always @1
# bind \ if '[ #{pane_index} -eq 1 ]' \
#      'swap-pane -s "!"' \
#      'select-pane -t:.1 ; swap-pane -d -t 1 -s "!"'

# Kill pane/window/session shortcuts
bind x kill-pane
# Renumber windows when windows in between have been closed
set-option -g renumber-windows on
bind X kill-window
bind C-x confirm-before -p "kill other windows? (y/n)" "kill-window -a"
bind Q confirm-before -p "kill-session #S? (y/n)" kill-session

# Merge session with another one (e.g. move all windows)
# If you use adhoc 1-window sessions, and you want to preserve session upon exit
# but don't want to create a lot of small unnamed 1-window sessions around
# move all windows from current session to main named one (dev, work, etc)
bind C-u command-prompt -p "Session to merge with: " \
   "run-shell 'yes | head -n #{session_windows} | xargs -I {} -n 1 tmux movew -t %%'"

# Detach from session
bind d detach
bind D if -F '#{session_many_attached}' \
    'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
    'display "Session has only 1 client attached"'

# Hide status bar on demand
bind C-s if -F '#{s/off//:status}' 'set status off' 'set status on'



# ==================================================
# === Window monitoring for activity and silence ===
# ==================================================
bind m setw monitor-activity \; display-message 'Monitor window activity [#{?monitor-activity,ON,OFF}]'
bind M if -F '#{monitor-silence}' \
    'setw monitor-silence 0 ; display-message "Monitor window silence [OFF]"' \
    'command-prompt -p "Monitor silence: interval (s)" "setw monitor-silence %%"'

# Activity bell and whistles
set -g visual-activity on

# TODO: Does not work as well, check on newer versions
# set -g visual-silence on

# BUG: bell-action other ignored · Issue #1027 · tmux/tmux · GitHub - https://github.com/tmux/tmux/issues/1027
# set -g visual-bell on
# setw -g bell-action other

# ================================================
# ===     Copy mode, scroll and clipboard      ===
# ================================================
set -g @copy_use_osc52_fallback on

# Prefer vi style key table
setw -g mode-keys vi

bind p paste-buffer
bind C-p choose-buffer

# trigger copy mode by
bind -n M-Up copy-mode

# bind -n M-k send-keys -X scroll-up
# bind -n M-j send-keys -X scroll-down

# Scroll up/down by 1 line, half screen, whole screen
bind -T copy-mode-vi M-Up              send-keys -X scroll-up
bind -T copy-mode-vi M-Down            send-keys -X scroll-down
bind -T copy-mode-vi M-PageUp          send-keys -X halfpage-up
bind -T copy-mode-vi M-PageDown        send-keys -X halfpage-down
bind -T copy-mode-vi PageDown          send-keys -X page-down
bind -T copy-mode-vi PageUp            send-keys -X page-up

# When scrolling with mouse wheel, reduce number of scrolled rows per tick to "2" (default is 5)
bind -T copy-mode-vi WheelUpPane       select-pane \; send-keys -X -N 2 scroll-up
bind -T copy-mode-vi WheelDownPane     select-pane \; send-keys -X -N 2 scroll-down

# wrap default shell in reattach-to-user-namespace if available
# there is some hack with `exec & reattach`, credits to "https://github.com/gpakosz/.tmux"
# don't really understand how it works, but at least window are not renamed to "reattach-to-user-namespace"
if -b "command -v reattach-to-user-namespace > /dev/null 2>&1" \
    "run 'tmux set -g default-command \"exec $(tmux show -gv default-shell) 2>/dev/null & reattach-to-user-namespace -l $(tmux show -gv default-shell)\"'"

# https://stackoverflow.com/questions/31404140/can-i-use-double-click-to-select-and-copy-in-tmux
# Double LMB Select & Copy (Word)
bind-key -T copy-mode-vi DoubleClick1Pane \
    select-pane \; \
    send-keys -X select-word \; \
    send-keys -X copy-pipe "xclip -in -sel primary | sed 's/()()//g'"

# Triple LMB Select & Copy (Line)
bind-key -T copy-mode-vi TripleClick1Pane \
    select-pane \; \
    send-keys -X select-line \; \
    send-keys -X copy-pipe "xclip -in -sel primary"


yank="~/.tmux/yank.sh"

# Copy selected text
bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "$yank"
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "$yank"
bind -T copy-mode-vi Y send-keys -X copy-line \;\
    run "tmux save-buffer - | $yank"
bind-key -T copy-mode-vi D send-keys -X copy-end-of-line \;\
    run "tmux save-buffer - | $yank"
bind -T copy-mode-vi C-j send-keys -X copy-pipe-and-cancel "$yank"
bind-key -T copy-mode-vi A send-keys -X append-selection-and-cancel \;\
    run "tmux save-buffer - | $yank"

# Copy selection on drag end event, but do not cancel copy mode and do not clear selection
# clear select on subsequence mouse click
bind -T copy-mode-vi MouseDragEnd1Pane \
    send-keys -X copy-pipe "$yank"
bind -T copy-mode-vi MouseDown1Pane select-pane \;\
   send-keys -X clear-selection

# iTerm2 works with clipboard out of the box, set-clipboard already set to "external"
# tmux show-options -g -s set-clipboard
# set-clipboard on|external

# =====================================
# ===           Theme               ===
# =====================================

# Feel free to NOT use this variables at all (remove, rename)
# this are named colors, just for convenience
color_orange="colour166" # 208, 166
color_purple="colour134" # 135, 134
color_green="colour076" # 070
color_blue="colour39"
color_yellow="colour220"
color_red="colour160"
color_black="colour232"
color_white="white" # 015

# This is a theme CONTRACT, you are required to define variables below
# Change values, but not remove/rename variables itself
# color_dark="$color_black"
# color_light="$color_white"
# color_session_text="$color_blue"
# color_status_text="colour245"
# color_main="$color_orange"
# color_secondary="$color_purple"
# color_level_ok="$color_green"
# color_level_warn="$color_yellow"
# color_level_stress="$color_red"
# color_window_off_indicator="colour088"
# color_window_off_status_bg="colour238"
# color_window_off_status_current_bg="colour254"

# One Dark Theme colors
mono_1='#abb2bf'
mono_2='#828997'
mono_3='#5c6370'
mono_4='#4b5263'

hue_1='#56b6c2'
hue_2='#61afef'
hue_3='#c678dd'
hue_4='#98c379'

hue_5='#e06c75'
hue_5_2='#be5046'

hue_6='#d19a66'
hue_6_2='#e5c07b'

syntax_bg='#282c34'
syntax_gutter='#636d83'
syntax_cursor='#2c323c'

syntax_accent='#528bff'

vertsplit='#181a1f'
special_grey='#3b4048'
visual_grey='#3e4452'
pmenu='#333841'

color_main=$hue_1
color_secondary="#c678dd"
# color_dark="#202329"
color_dark="#282c34"
color_light="#fefefe"
# color_session_text="#72bef2"
color_session_text=$color_dark
color_session_bg=$hue_2
color_status_text=$mono_1
color_window_tab_bg=$hue_3
# color_main="#65c2cd"
# color_secondary="#d291e4"
color_level_ok="#a7cc8c"
color_level_warn="#dbaa79"
color_level_stress="#e88388"
color_window_off_indicator="#a7cc8c"
color_window_off_status_bg="#202329"
color_window_off_status_current_bg="#202329"
color_dividing_lines="#e7e9e1"

# =====================================
# ===    Appearence and status bar  ===
# ======================================

set -g mode-style "fg=default,bg=$color_main"

# command line style
set -g message-style "fg=$color_main,bg=$color_dark"

# status line style
set -g status-style "fg=$color_status_text,bg=$color_dark"

# window segments in status line
set -g window-status-separator ""
separator_powerline_left=""
separator_powerline_right=""
# separator_powerline_left=""
# separator_powerline_right=""


# setw -g window-status-style "fg=$color_status_text,bg=$color_dark"
# setw -g window-status-format " #I:#W "
# setw -g window-status-current-style "fg=$color_light,bold,bg=$color_main"
# setw -g window-status-current-format "#[fg=$color_dark,bg=$color_main]$separator_powerline_right#[default] #I:#W# #[fg=$color_main,bg=$color_dark]$separator_powerline_right#[default]"
setw -g window-status-format " #W "
setw -g window-status-current-style "fg=$color_light,bold,bg=$color_window_tab_bg"
setw -g window-status-current-format "#[fg=$color_dark,bg=$color_window_tab_bg]$separator_powerline_right#[default] #W #[fg=$color_window_tab_bg,bg=$color_dark]$separator_powerline_right#[default]"

# when window has monitoring notification
setw -g window-status-activity-style "fg=$color_main"

# setw -g pane-border-style "fg=$color_dividing_lines"
setw -g pane-border-style "fg=$mono_4"

# outline for active pane
setw -g pane-active-border-style "fg=$color_main"


# select-pane -t:.1 -P 'fg=$color_main,bg=black'

# general status bar settings
set -g status on
set -g status-interval 5
# set -g status-position bottom
set -g status-position top
set -g status-justify left
# set -g status-justify right
set -g status-right-length 230


# define widgets we're going to use in status bar

faded_div="#[fg=$mono_4]┃#[default]"
# note, that this is not the complete list, some of them are loaded from plugins
# wg_session="#[fg=$color_session_text, bg=$color_session_bg] #S #[fg=$color_session_bg, bg=$color_dark]$separator_powerline_right#[default]"
wg_session="#[fg=$color_session_text, bg=$color_session_bg] #S #[fg=$color_session_bg, bg=$color_dark]$separator_powerline_right#[default]"
# wg_battery="#{battery_status_fg} #{battery_icon} #{battery_percentage}"
color_date_bg=$hue_3
color_date_text=$color_session_text
# color_spotify_text='white'
date_before="#[bg=default]#[fg=$color_date_bg]$separator_powerline_left#[bg=$color_date_bg]#[fg=$color_date_text]"
date_after="#[fg=$color_session_text]#[bg=$color_date_bg]$separator_powerline_left#[default]"
wg_date="$date_before %h %d %I:%M %p $date_after"
# wg_user_host="#[fg=$color_secondary]#(whoami)#[default]@#H"
# zoomed_icon="[Z]"
color_zoomed_bg=$hue_5_2
color_zoomed_text='white'
zoom_before="#[bg=default]#[fg=$color_zoomed_bg]$separator_powerline_left#[bg=$color_zoomed_bg]#[fg=$color_zoomed_text]"
zoom_after="#[fg=$color_session_text]#[bg=$color_zoomed_bg]$separator_powerline_left#[default]"
# zoom_after="#[fg=$color_zoomed_bg]#[bg=$color_zoomed_bg]$separator_powerline_left#[default]"
# zoomed_icon="$zoom_before $zoom_after"
zoomed_icon="$zoom_before + $zoom_after"
# not_zoomed_icon="$zoom_before $zoom_after"
not_zoomed_icon=""

wg_is_zoomed="#{?window_zoomed_flag,$zoomed_icon,$not_zoomed_icon}"

# weather="#(ansiweather -l London,Ontario -u metric -w false -p false -i false -a false)"

# TODO: highlighted for nested local session as well
# wg_is_keys_off="#[fg=$color_light,bg=$color_window_off_indicator]#([ $(tmux show-option -qv key-table) = 'off' ] && echo 'OFF')#[default]"

color_spotify_bg=$hue_4
color_spotify_text=$color_session_text
# color_spotify_text='white'
spotify_before="#[bg=default]#[fg=$color_spotify_bg]$separator_powerline_left#[bg=$color_spotify_bg]#[fg=$color_spotify_text]"
spotify_after="#[fg=$color_session_text]#[bg=$color_spotify_bg]$separator_powerline_left#[default]"

show_spotify="#(ps aux | grep Spotify | grep -v 'grep')"
spotify_icon=" "
spotify_info="$spotify_before $spotify_icon - #{spotify_track} #{spotify_status} $spotify_after"
spotify_stuff="#{?$show_spotify,$spotify_info,}"
# set -g @spotify_paused_icon ""
# set -g @spotify_playing_icon ""

# slack_count="Slack: #[fg=$hue_2]#{slack_dms}#[fg=default] / #[fg=$hue_3]#{slack_mentions}#[fg=default] / #[fg=$hue_2]#{slack_messages}#[fg=default]"
# set -g @slack_update_delay '5 minutes'
slack_count=""

git_branch="#(cd #{pane_current_path}; git rev-parse --abbrev-ref HEAD)"

git_commit="#(cd #{pane_current_path}; git rev-parse --short=7 HEAD)"

git_commit_bg_color=$hue_4
git_commit_fg_color=$color_session_text
git_commit_format="#[bg=default]#[fg=$git_commit_bg_color]$separator_powerline_left#[fg=$git_commit_fg_color]#[bg=$git_commit_bg_color] $git_commit #[fg=$git_commit_bg_color]#[bg=default]#[fg=$git_commit_fg_color]#[bg=$git_commit_bg_color]$separator_powerline_left#[default]"
git_commit_display="#{?$git_commit,$git_commit_format,}"
# git_commit_display=$git_commit_format

git_branch_bg_color=$hue_2
git_branch_fg_color=$color_session_text
# git_branch_fg_color="white"
git_branch_format="#[bg=default]#[fg=$git_branch_bg_color]$separator_powerline_left#[fg=$git_branch_fg_color]#[bg=$git_branch_bg_color]  $git_branch #[fg=$git_branch_bg_color]#[default]#[fg=$git_branch_fg_color]#[bg=$git_branch_bg_color]$separator_powerline_left#[default]"

# git_branch_format="#[fg=$hue_5_2]$git_branch#[default]"
git_branch_display="#{?$git_branch,$git_branch_format,}"
# git_branch_display=$git_branch_format

color_heart_bar_bg=$mono_4
color_heart_bar_text=$color_session_text
# color_heart_bar_text='white'
heart_bar_before="#[bg=default]#[fg=$color_heart_bar_bg]$separator_powerline_left#[bg=$color_heart_bar_bg]#[fg=$color_heart_bar_text]"
# heart_bar_after="#[fg=$color_session_text]#[bg=$color_heart_bar_bg]$separator_powerline_left#[default]"
heart_bar_after="#[default]"
heart_bar_display="$heart_bar_before#{battery_heart_meter} $heart_bar_after"

# git_branch_name="#(git status >& /dev/null; if [[ $? -eq 0 ]]; then git rev-parse head --abbrev-ref; fi)
set -g status-left-length 200
set -g status-left "$wg_session"
# (rainbarf --tmux --bright --no-battery)
# set -g status-right "$wg_is_zoomed $spotify_stuff %a %h-%d %I:%M%p |#{battery_heart_meter}  "
# set -g status-right "#{prefix_highlight} $wg_is_zoomed #{sysstat_cpu} $faded_div #{sysstat_mem} $faded_div $spotify_stuff $faded_div $wg_date $faded_div#{battery_heart_meter}" 
set -g status-right "$git_commit_display$git_branch_display$wg_is_zoomed$spotify_stuff$wg_date$heart_bar_display"

# online and offline icon for tmux-online-status
set -g @online_icon "#[fg=$color_level_ok]●#[default]"
set -g @offline_icon "#[fg=$color_level_stress]●#[default]"

# Configure view templates for tmux-plugin-sysstat "MEM" and "CPU" widget
set -g @sysstat_mem_view_tmpl 'MEM:#[fg=#{mem.color}]#{mem.pused}#[default] #{mem.used}'

# Configure tmux-prefix-highlight colors
set -g @prefix_highlight_output_prefix "#[fg=$color_secondary]$separator_powerline_left#[fg=$color_dark]"
set -g @prefix_highlight_output_suffix "#[fg=$color_secondary]$separator_powerline_right"
set -g @prefix_highlight_fg "$color_dark"
set -g @prefix_highlight_bg "$color_secondary"
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_mode_attr "fg=$color_dark,bg=$color_secondary"


# =====================================
# ===        Renew environment      ===
# =====================================
set -g update-environment \
  "DISPLAY\
  SSH_ASKPASS\
  SSH_AUTH_SOCK\
  SSH_AGENT_PID\
  SSH_CONNECTION\
  SSH_TTY\
  WINDOWID\
  XAUTHORITY"

bind '$' run "~/.tmux/renew_env.sh"


# ============================
# ===       Plugins        ===
# ============================
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-battery'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'tmux-plugins/tmux-online-status'
set -g @plugin 'tmux-plugins/tmux-sidebar'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'tmux-plugins/tmux-net-speed'
set -g @plugin 'samoshkin/tmux-plugin-sysstat'
set -g @plugin 'robhurring/tmux-spotify'
set -g @plugin 'tmux-plugins/tmux-example-plugin'
set -g @plugin 'tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'xp-bar/tmux-battery-heart-meter'
set -g @plugin 'x4121/tmux-slack-counter'

# last saved environment is automatically restored when tmux is started.
set -g @continuum-restore 'on'

# Plugin properties
set -g @sidebar-tree 't'
# set -g @sidebar-tree-focus 'T'
set -g @sidebar-tree-command 'tree -C'

set -g @open-S 'https://www.google.com/search?q='


# ==============================================
# ===   Nesting local and remote sessions     ===
# ==============================================

# Session is considered to be remote when we ssh into host
if-shell 'test -n "$SSH_CLIENT"' \
    'source-file ~/.tmux/tmux.remote.conf'

# We want to have single prefix key "C-a", usable both for local and remote session
# we don't want to "C-a" + "a" approach either
# Idea is to turn off all key bindings and prefix handling on local session,
# so that all keystrokes are passed to inner/remote session

# see: toggle on/off all keybindings · Issue #237 · tmux/tmux - https://github.com/tmux/tmux/issues/237

# Also, change some visual styles when window keys are off
bind -T root F12  \
    set prefix None \;\
    set key-table off \;\
    set status-style "fg=$color_status_text,bg=$color_window_off_status_bg" \;\
    set window-status-current-format "#[fg=$color_window_off_status_bg,bg=$color_window_off_status_current_bg]$separator_powerline_right#[default] #W #[fg=$color_window_off_status_current_bg,bg=$color_window_off_status_bg]$separator_powerline_right#[default]" \;\
    set window-status-current-style "fg=$color_dark,bold,bg=$color_window_off_status_current_bg" \;\
    set status-bg default
    if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
    refresh-client -S \;\

bind -T off F12 \
  set -u prefix \;\
  set -u key-table \;\
  set -u status-style \;\
  set -u window-status-current-style \;\
  set -u window-status-current-format \;\
  refresh-client -S

# Run all plugins' scripts
run '~/.tmux/plugins/tpm/tpm'
set -g status-bg default

# set -g lock-after-time 5
set -g lock-after-time 600
# set -g lock-command "cmatrix -as -C green"
set -g lock-command "cmatrix -as -C blue"
# set -g lock-command "pipes.sh -t 3"

# set-option -g default-commnotesand "which reattach-to-user-namespace > /dev/null && reattach-to-user-namespace -l $SHELL || $SHELL"

# smart pane switching with awareness of vim splits
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l"
