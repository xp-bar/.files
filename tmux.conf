# ===================================================
# 
# ▌ ▌   ▛▀▖      ▝▌     ▐                       ▗▀▖
# ▝▞ ▛▀▖▙▄▘▝▀▖▙▀▖▝▞▀▘   ▜▀ ▛▚▀▖▌ ▌▚▗▘  ▞▀▖▞▀▖▛▀▖▐  
# ▞▝▖▙▄▘▌ ▌▞▀▌▌   ▝▀▖ ▗▖▐ ▖▌▐ ▌▌ ▌▗▚ ▗▖▌ ▖▌ ▌▌ ▌▜▀ 
# ▘ ▘▌  ▀▀ ▝▀▘▘   ▀▀  ▝▘ ▀ ▘▝ ▘▝▀▘▘ ▘▝▘▝▀ ▝▀ ▘ ▘▐  
# 
# ===================================================

# === General Settings === {{{

# Add truecolor support
set -g default-terminal "screen-256color"
set-option -ga terminal-overrides ",xterm-256color:Tc"

set -g history-limit 20000
set -g buffer-limit 20
set -sg escape-time 0
set -g display-time 1500
set -g remain-on-exit off
set -g repeat-time 300
setw -g allow-rename off
set -g allow-rename off
setw -g automatic-rename off
setw -g aggressive-resize off
set -g focus-events on

# Change prefix key to C-a, easier to type, same to "screen"
unbind C-b
set -g prefix C-a

# Set parent terminal title to reflect current window in tmux session
set -g set-titles on
set -g set-titles-string "#I:#W"

# Start index of window/pane with 1, because we're humans, not computers
set -g base-index 1
setw -g pane-base-index 1

# Enable mouse support
set -g mouse on

set-environment -g PATH "/usr/local/bin:/bin:/usr/bin"

set -g default-command zsh

# }}}

# === Key bindings === {{{

# Unbind default key bindings, we're going to override {{{
unbind "\$" # rename-session
unbind ,    # rename-window
unbind %    # split-window -h
unbind '"'  # split-window
unbind \}    # swap-pane -D
unbind \{    # swap-pane -U
unbind [    # paste-buffer
unbind ]
unbind "'"  # select-window
unbind n    # next-window
unbind p    # previous-window
unbind l    # last-window
unbind M-n  # next window with alert
unbind M-p  # next window with alert
unbind o    # focus thru panes
unbind &    # kill-window
unbind "#"  # list-buffer
unbind =    # choose-buffer
unbind z    # zoom-pane
unbind M-Up  # resize 5 rows up
unbind M-Down # resize 5 rows down
unbind M-Right # resize 5 rows right
unbind M-Left # resize 5 rows left
# }}}


set-window-option -g mode-keys vi

# Edit configuration and reload
bind C-e new-window -n 'tmux.conf' "sh -c '\${EDITOR:-vim} ~/.tmux.conf && tmux source ~/.tmux.conf && tmux display \"Config reloaded\"'"

# Reload tmux configuration
bind C-r source-file ~/.tmux.conf \; display "Config reloaded"

# new window and retain cwd
bind c new-window -c "#{pane_current_path}"
bind C new-session -s "#I"

# Prompt to rename window right after it's created
# set-hook -g after-new-window 'command-prompt -I "#{window_name}" "rename-window '%%'"'
# set-hook -g after-new-session 'command-prompt -I "#{session_name}" "rename-session '%%'"'
set-hook -g after-new-window ''
set-hook -g after-new-session ''

# Rename session and window
bind r command-prompt -I "#{window_name}" "rename-window '%%'"
bind R command-prompt -I "#{session_name}" "rename-session '%%'"

# Split panes
bind | split-window -h -c "#{pane_current_path}"
bind _ split-window -v -c "#{pane_current_path}"

# Select pane and windows {{{
bind -n M-k previous-window
bind -n M-j next-window
bind -n M-1 select-window -t 1
bind -n M-2 select-window -t 2
bind -n M-3 select-window -t 3
bind -n M-4 select-window -t 4
bind -n M-5 select-window -t 5
bind -n M-6 select-window -t 6
bind -n M-7 select-window -t 7
bind -n M-8 select-window -t 8
bind -n M-9 select-window -t 9
bind -r C-o swap-pane -D

# move a window left, and keep it selected with 'previous-window'
bind-key -r < swap-window -t -1 \; previous-window

# move a window right, and keep it selected with 'next-window'
bind-key -r > swap-window -t +1 \; next-window
# }}}

# Zoom pane
bind + resize-pane -Z

bind -r , resize-pane -L
bind -r . resize-pane -R

# Link window
bind L command-prompt -p "Link window from (session:window): " "link-window -s %% -a"

# Renumber windows when windows in between have been closed
set-option -g renumber-windows on

# Kill pane/window/session shortcuts
bind x kill-pane
bind X kill-window
bind C-x confirm-before -p "kill other windows? (y/n)" "kill-window -a"
bind Q confirm-before -p "kill-session #S? (y/n)" kill-session

# Merge session with another one (e.g. move all windows)
# If you use adhoc 1-window sessions, and you want to preserve session upon exit
# but don't want to create a lot of small unnamed 1-window sessions around
# move all windows from current session to main named one (dev, work, etc)
bind C-u command-prompt -p "Session to merge with: " \
   "run-shell 'yes | head -n #{session_windows} | xargs -I {} -n 1 tmux movew -t %%'"

# Detach from session
bind d detach
bind D if -F '#{session_many_attached}' \
    'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
    'display "Session has only 1 client attached"'

# Hide status bar on demand
bind M-s if -F '#{s/off//:status}' 'set status off' 'set status on'

# }}}

# === Window monitoring for activity and silence === {{{

bind m setw monitor-activity \; display-message 'Monitor window activity [#{?monitor-activity,ON,OFF}]'
bind M if -F '#{monitor-silence}' \
    'setw monitor-silence 0 ; display-message "Monitor window silence [OFF]"' \
    'command-prompt -p "Monitor silence: interval (s)" "setw monitor-silence %%"'

# Activity bell and whistles
set -g visual-activity on

# TODO: Does not work as well, check on newer versions
set -g visual-silence on

# }}}

# === Copy mode, scroll and clipboard === {{{

# set -g @copy_use_osc52_fallback on

# Prefer vi style key table
setw -g mode-keys vi

bind p paste-buffer
bind C-p choose-buffer

# trigger copy mode by
bind v copy-mode
# default from config
# bind -n M-Up copy-mode

# start selecting with v
bind -T copy-mode-vi v send-keys -X begin-selection

# Scroll up/down by 1 line, half screen, whole screen
bind -T copy-mode-vi M-Up              send-keys -X scroll-up
bind -T copy-mode-vi M-Down            send-keys -X scroll-down
bind -T copy-mode-vi M-PageUp          send-keys -X halfpage-up
bind -T copy-mode-vi M-PageDown        send-keys -X halfpage-down
bind -T copy-mode-vi PageDown          send-keys -X page-down
bind -T copy-mode-vi PageUp            send-keys -X page-up

# When scrolling with mouse wheel, reduce number of scrolled rows per tick to "2" (default is 5)
bind -T copy-mode-vi WheelUpPane       select-pane \; send-keys -X -N 2 scroll-up
bind -T copy-mode-vi WheelDownPane     select-pane \; send-keys -X -N 2 scroll-down

# https://stackoverflow.com/questions/31404140/can-i-use-double-click-to-select-and-copy-in-tmux
# Double LMB Select & Copy (Word)
bind-key -T copy-mode-vi DoubleClick1Pane \
    select-pane \; \
    send-keys -X select-word \; \
    send-keys -X copy-pipe "xclip -in -sel primary | sed 's/()()//g'"

# Triple LMB Select & Copy (Line)
bind-key -T copy-mode-vi TripleClick1Pane \
    select-pane \; \
    send-keys -X select-line \; \
    send-keys -X copy-pipe "xclip -in -sel primary"


yank="~/.tmux/yank.sh"

# Copy selected text {{{
bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "$yank"
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "$yank"
bind -T copy-mode-vi Y send-keys -X copy-line \;\
    run "tmux save-buffer - | $yank"
bind-key -T copy-mode-vi D send-keys -X copy-end-of-line \;\
    run "tmux save-buffer - | $yank"
bind -T copy-mode-vi C-j send-keys -X copy-pipe-and-cancel "$yank"
bind-key -T copy-mode-vi A send-keys -X append-selection-and-cancel \;\
    run "tmux save-buffer - | $yank"
# }}}

# Copy selection on drag end event, but do not cancel copy mode and do not clear selection {{{
# clear select on subsequence mouse click
bind -T copy-mode-vi MouseDragEnd1Pane \
    send-keys -X copy-pipe "$yank"
bind -T copy-mode-vi MouseDown1Pane select-pane \;\
   send-keys -X clear-selection
# }}}

bind -n MouseDown1StatusLeft display-menu -x M -y S \
    "Switch Session" s 'choose-tree -sZ' \
    "Switch Window" w 'choose-tree -wZ'
# iTerm2 works with clipboard out of the box, set-clipboard already set to "external"
# tmux show-options -g -s set-clipboard
# set-clipboard on|external

# }}}

# === Theme === {{{

# One Dark Theme colors {{{
mono_1='#abb2bf'
mono_2='#828997'
mono_3='#5c6370'
mono_4='#4b5263'

hue_1='#56b6c2'
hue_2='#61afef'
hue_3='#c678dd'
hue_4='#98c379'

hue_5='#e06c75'
hue_5_2='#be5046'

hue_6='#d19a66'
hue_6_2='#e5c07b'

syntax_bg='#282c34'
syntax_gutter='#636d83'
syntax_cursor='#2c323c'

syntax_accent='#528bff'
# }}}

vertsplit='#181a1f'
special_grey='#3b4048'
visual_grey='#3e4452'
pmenu='#333841'

color_dark="#282c34" # required
color_light="#fefefe" # required
color_session_text=$color_dark # required
color_session_bg=$hue_2
color_window_tab_bg=$hue_3
color_status_text=$mono_1
color_main=$hue_1 # required
color_secondary="#c678dd" # required
color_level_ok="#a7cc8c" # required
color_level_warn=$hue_6_2 # required
color_level_stress="#e88388" # required
color_window_off_indicator="#a7cc8c" # required
color_window_off_status_bg="#202329" # required
color_window_off_status_current_bg="#202329" # required
color_dividing_lines="#e7e9e1"
color_window_tab_activity=$hue_5_2
# }}}

# === Appearence and status bar === {{{

set -g mode-style "fg=default,bg=$color_main"

# command line style
set -g message-style "fg=$color_main,bg=$color_dark"

# status line style
set -g status-style "fg=$color_status_text,bg=$color_dark"

# window segments in status line
set -g window-status-separator ""
separator_powerline_left=""
separator_powerline_right=""

setw -g window-status-format "#[fg=$color_dark,bg=$mono_4]$separator_powerline_right#[fg=default, bg=$mono_4] #W #[fg=$mono_4,bg=$color_dark]$separator_powerline_right#[default]"
setw -g window-status-current-style "fg=$color_light,bold,bg=$color_window_tab_bg"
setw -g window-status-current-format "#[fg=$color_session_text,bg=$color_window_tab_bg]$separator_powerline_right#[fg=$color_dark] #W #[fg=$color_window_tab_bg,bg=$color_dark]$separator_powerline_right#[default]"

# when window has monitoring notification
setw -g window-status-activity-style "fg=$color_main,bg=$color_window_tab_activity"

# outline for active pane
setw -g pane-active-border-style "fg=$color_main"
setw -g pane-border-style "fg=$mono_4"
set -g status on
set -g status-interval 5
set -g status-position top
set -g status-justify left
set -g status-right-length 230


# define widgets we're going to use in status bar

faded_div="#[fg=$mono_4]┃#[default]"
wg_session="#[fg=$color_session_text, bg=$color_session_bg] #S #[fg=$color_session_bg, bg=$color_dark]$separator_powerline_right#[default]"
color_date_bg=$hue_3
color_date_text=$color_session_text
date_before="#[bg=default]#[fg=$color_date_bg]$separator_powerline_left#[bg=$color_date_bg]#[fg=$color_date_text]"
date_after="#[fg=$color_session_text]#[bg=$color_date_bg]$separator_powerline_left#[default]"
wg_date="$date_before %h %d %I:%M %p $date_after"
color_zoomed_bg=$hue_5_2
color_zoomed_text='white'
zoom_before="#[bg=default]#[fg=$color_zoomed_bg]$separator_powerline_left#[bg=$color_zoomed_bg]#[fg=$color_zoomed_text]"
zoom_after="#[fg=$color_session_text]#[bg=$color_zoomed_bg]$separator_powerline_left#[default]"
zoomed_icon="$zoom_before + $zoom_after"
not_zoomed_icon=""

wg_is_zoomed="#{?window_zoomed_flag,$zoomed_icon,$not_zoomed_icon}"

# Spotify {{{
# color_spotify_bg=""
# color_spotify_text=""
# spotify_before=""
# spotify_after=""
spotify_icon=" "
color_spotify_bg=$hue_4
color_spotify_text=$color_session_text
spotify_before="#[bg=default]#[fg=$color_spotify_bg]$separator_powerline_left#[bg=$color_spotify_bg]#[fg=$color_spotify_text]"
spotify_after="#[fg=$color_session_text]#[bg=$color_spotify_bg]$separator_powerline_left#[default]"

show_spotify="#(ps xc | grep -i spotify)"
spotify_artist="#(ps xc | grep -i spotify 2>&1 >/dev/null && spotify status artist 2>/dev/null)"
spotify_track="#(ps xc | grep -i spotify 2>&1 >/dev/null && spotify status track 2>/dev/null)"

spotify_info="$spotify_before $spotify_icon $spotify_artist - ${spotify_track} $spotify_after"
spotify_stuff="#{?$show_spotify,$spotify_info,}"
# spotify_stuff=""
# }}}

# git {{{
# git_commit="#(cd #{pane_current_path}; git rev-parse --short=7 HEAD)"
# git_commit_bg_color=$hue_4
# git_commit_fg_color=$color_session_text
# git_commit_format="#[bg=default]#[fg=$git_commit_bg_color]$separator_powerline_left#[fg=$git_commit_fg_color]#[bg=$git_commit_bg_color] $git_commit #[fg=$git_commit_bg_color]#[bg=default]#[fg=$syntax_bg]#[bg=$git_commit_bg_color]$separator_powerline_left#[default]"
# git_commit_display="#{?$git_commit,$git_commit_format,}"
git_commit_display=""

# git_branch="#(cd #{pane_current_path}; git rev-parse --abbrev-ref HEAD)"
# git_branch_bg_color=$hue_2
# git_branch_fg_color=$color_session_text
# git_branch_format="#[bg=default]#[fg=$git_branch_bg_color]$separator_powerline_left#[fg=$git_branch_fg_color]#[bg=$git_branch_bg_color]  $git_branch #[fg=$git_branch_bg_color]#[default]#[fg=$syntax_bg]#[bg=$git_branch_bg_color]$separator_powerline_left#[default]"
# git_branch_display="#{?$git_branch,$git_branch_format,}"
git_branch_display=""

git_repo="#(cd #{pane_current_path}; git remote show origin -n | grep h.URL | sed 's/.*://;s/.git$//')"
# git_repo_bg_color=$hue_2
# git_repo_fg_color=$color_session_text
git_repo_bg_color=$mono_4
git_repo_fg_color=$mono_1
git_repo_format="#[bg=default]#[fg=$git_repo_bg_color]$separator_powerline_left#[fg=$git_repo_fg_color]#[bg=$git_repo_bg_color]  $git_repo #[fg=$git_repo_bg_color]#[default]#[fg=$syntax_bg]#[bg=$git_repo_bg_color]$separator_powerline_left#[default]"
git_repo_display="#{?$git_repo,$git_repo_format,}"
# }}}

# Heart Bar {{{
color_heart_bar_bg=$mono_4
color_heart_bar_text=$color_session_text
heart_bar_before="#[bg=default]#[fg=$color_heart_bar_bg]$separator_powerline_left#[bg=$color_heart_bar_bg]#[fg=$color_heart_bar_text]"
heart_bar_after="#[default] "
heart_bar_display="$heart_bar_before#{battery_heart_meter} $heart_bar_after"
if-shell "uname | grep -q Linux && [ $? == 0 ]" 'set -g @heart_icon ""'
if-shell "uname | grep -q Linux && [ $? == 0 ]" 'set -g @bad_heart_icon ""'
if-shell "uname | grep -q Darwin && [ $? == 0 ]" 'set -g @heart_icon ""'
if-shell "uname | grep -q Darwin && [ $? == 0 ]" 'set -g @bad_heart_icon ""'
# }}}

# Notfications {{{
color_xp_notify_bg=$color_session_text
color_xp_notify_text=$hue_6
xp_notify="#(echo \"$(cat ~/.notifications | wc -l | sed 's:^[ ]*::g')\")"
xp_notify_icon=""
xp_notify_string=" $xp_notify_icon $xp_notify"
xp_notify_format="#[bg=default]#[fg=$color_xp_notify_bg]$separator_powerline_left#[bg=$color_xp_notify_bg]#[fg=$color_xp_notify_text]$xp_notify_string #[default]"
xp_notify_display="#{?$xp_notify,$xp_notify_format,}"
# }}}

# Webpack {{{
color_xp_webpack_bg=$hue_3
color_xp_webpack_text=$color_session_text
xp_webpack_running="#(cd #{pane_current_path}; [[ -e __.webpack ]] && [[ $(ps aux | grep webpack | grep -v 'grep') != '' ]] && echo 'ﰩ')"
xp_webpack_string=" $xp_webpack_running"
xp_webpack_format="#[bg=default]#[fg=$color_xp_webpack_bg]$separator_powerline_left#[bg=$color_xp_webpack_bg]#[fg=$color_xp_webpack_text]$xp_webpack_string #[fg=$color_xp_webpack_bg]#[default]#[fg=$color_xp_webpack_text]#[bg=$color_xp_webpack_bg]$separator_powerline_left#[default]"
xp_webpack_display="#{?$xp_webpack_running,$xp_webpack_format,}"
# }}}

# Pane Number {{{
color_pane_number_bg=$hue_4
color_pane_number_text=$color_session_text
pane_number_before="#[fg=$color_session_text]#[bg=$color_pane_number_bg]$separator_powerline_right"
pane_number_after="#[bg=default]#[fg=$color_pane_number_bg]$separator_powerline_right#[bg=$color_pane_number_bg]#[fg=$color_pane_number_text]"
pane_number_display="$pane_number_before #{roman_pane_number} $pane_number_after"
# }}}

set -g status-left-length 200
set -g status-left "$wg_session$pane_number_display"

set -g status-right "$xp_notify_display$git_commit_display$git_repo_display$git_branch_display$xp_headphones_display$xp_webpack_display$wg_is_zoomed$spotify_stuff$wg_date$heart_bar_display"

# Configure tmux-prefix-highlight colors
set -g @prefix_highlight_output_prefix "#[fg=$color_secondary]$separator_powerline_left#[fg=$color_dark]"
set -g @prefix_highlight_output_suffix "#[fg=$color_secondary]$separator_powerline_right"
set -g @prefix_highlight_fg "$color_dark"
set -g @prefix_highlight_bg "$color_secondary"
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_mode_attr "fg=$color_dark,bg=$color_secondary"

# }}}

# === Renew environment === {{{

set -g update-environment \
  "DISPLAY\
  SSH_ASKPASS\
  SSH_AUTH_SOCK\
  SSH_AGENT_PID\
  SSH_CONNECTION\
  SSH_TTY\
  WINDOWID\
  XAUTHORITY"

bind '$' run "~/.tmux/renew_env.sh"

# }}}

# === Plugins === {{{

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-battery'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'tmux-plugins/tmux-copycat'
# set -g @plugin 'robhurring/tmux-spotify'
set -g @plugin 'tmux-plugins/tmux-resurrect'
# set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'sainnhe/tmux-fzf'
set -g @plugin 'xp-bar/tmux-battery-heart-meter'
set -g @plugin 'xp-bar/tmux-roman-pane-number'

# adds snippet for pane switching
set -g @plugin 'christoomey/vim-tmux-navigator'

# last saved environment is automatically restored when tmux is started.
# set -g @continuum-restore 'on'

set -g @resurrect-save 'c-s'
set -g @resurrect-restore 'c-y'
set -g @resurrect-capture-pane-contents 'on'
set -g @resurrect-strategy-nvim 'session'

TMUX_FZF_LAUNCH_KEY="C-f"
TMUX_FZF_ORDER="session|window|pane|command|keybinding"
# }}}

# === Nesting local and remote sessions === {{{

# Session is considered to be remote when we ssh into host
# if-shell 'test -n "$SSH_CLIENT"' \
#     'source-file ~/.tmux/tmux.remote.conf'

# We want to have single prefix key "C-a", usable both for local and remote session
# we don't want to "C-a" + "a" approach either
# Idea is to turn off all key bindings and prefix handling on local session,
# so that all keystrokes are passed to inner/remote session

# see: toggle on/off all keybindings · Issue #237 · tmux/tmux - https://github.com/tmux/tmux/issues/237

# Also, change some visual styles when window keys are off
bind -T root F12  \
    set prefix None \;\
    set key-table off \;\
    set status-style "fg=$color_status_text,bg=$color_window_off_status_bg" \;\
    set window-status-current-format "#[fg=$color_window_off_status_bg,bg=$color_window_off_status_current_bg]$separator_powerline_right#[default] #W #[fg=$color_window_off_status_current_bg,bg=$color_window_off_status_bg]$separator_powerline_right#[default]" \;\
    set window-status-current-style "fg=$color_dark,bold,bg=$color_window_off_status_current_bg" \;\
    set status-bg default
    # if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
    # refresh-client -S

bind -T off F12 \
  set -u prefix \;\
  set -u key-table \;\
  set -u status-style \;\
  set -u window-status-current-style \;\
  set -u window-status-current-format \;\
  refresh-client -S

# Run all plugins' scripts
run '~/.tmux/plugins/tpm/tpm'
set -g status-bg default

# set -g lock-after-time 5
set -g lock-after-time 600
# set -g lock-command "cmatrix -bas -C green"
set -g lock-command "cmatrix -as -C blue"
# set -g lock-command "cmatrix -as -C blue"
# set -g lock-command "pipes.sh -t 3"

# }}}
